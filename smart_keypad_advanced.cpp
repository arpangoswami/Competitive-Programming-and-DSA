/*
Given a long vector of strings, print the strings that contain the strings generated by numeric string str.

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
For example, if the input is 26 and the string is coding, then output should be coding since 26 can produce co which is contained in coding.

Input Format
A numeric string str

Constraints
len(str) < 10
No of strings in the vector < 10

Output Format
Each matched string from the given vector.

Sample Input
34
Sample Output
vidhi
divyam
sneha
Explanation
34 will result into combinations :

*dg         *eg         *fg
*dh            *eh         *fh
*di            *ei         *fi
Corresponding strings are output.

vidhi contains dh
divyam contains di
sneha contains eh
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
string table[9] = {"","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
string searchIn[11] = { "prateek", "sneha", "deepak", "arnav", "shikha", "palak", "utkarsh", "divyam", "vidhi", "sparsh", "akku"};
void generateStrings(const string &s,int idx,vector<string> &allPossible,string &curr){
	if(idx == s.size()){
		allPossible.push_back(curr);
		return;
	}
	int digit = s[idx] - '1';
	string candidate = table[digit];
	for(char c:candidate){
		curr.push_back(c);
		generateStrings(s,idx+1,allPossible,curr);
		curr.pop_back();
	}
}
int main(int argc,char const* argv[]){
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	string s;
	cin >> s;
	vector<string> allPossible;
	unordered_set<string> appeared;
	string curr = "";
	generateStrings(s,0,allPossible,curr);
	vector<string> solution;
	for(string x:allPossible){
		for(int i=0;i<11;i++){
			if(appeared.count(searchIn[i]) == 0 && searchIn[i].find(x)!=string::npos){
				solution.push_back(searchIn[i]);
				appeared.insert(searchIn[i]);
			}	
		}
	}
	for(string x:solution){
		cout<<x<<"\n";
	} 
	return 0;
}